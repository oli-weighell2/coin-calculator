{
  "name": "i18n-future",
  "version": "0.2.0",
  "description": "i18n for node",
  "main": "index.js",
  "directories": {
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "lint": "eslint ./lib",
    "unit": "mocha --require test/helpers --recursive ./test/spec",
    "test": "npm run lint && npm run unit"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/lennym/i18n-future.git"
  },
  "keywords": [
    "i18n"
  ],
  "author": {
    "name": "Leonard Martin",
    "email": "hello@lennym.co.uk"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/lennym/i18n-future/issues"
  },
  "homepage": "https://github.com/lennym/i18n-future",
  "dependencies": {
    "lodash": "^3.7.0",
    "glob": "^5.0.5"
  },
  "devDependencies": {
    "chai": "^2.3.0",
    "mocha": "^2.2.4",
    "eslint": "^0.20.0",
    "sinon-chai": "^2.7.0",
    "sinon": "^1.14.1",
    "reqres": "^1.2.1"
  },
  "readme": "# i18n-future\ni18n for node\n\nA ground up rebuild of the [i18next](http://www.npmjs.com/package/i18next) project for a node environment.\n\nThe [i18next](http://www.npmjs.com/package/i18next) project has a number of issues that result from it being a port of an originally client-side project. In particular that it maintains a single global datastore, and so if two modules resolve to the same instance then they will interfere with each other.\n\nThe aim of this project is to create a module-safe, lightweight translation library for a node environment, based on similar concepts to i18next.\n\n## Install\n\n```\nnpm install [--save] i18n-future\n```\n\n## Usage\n\nFirst create some resource files. These should be json files and the location of the file within your project will define the language it corresponds to.\n\nAn example file structure would look like:\n\n```\nindex.js\n/locales\n  /en\n    /default.json\n  /fr\n    /default.json\n  /de\n    /default.json\n```\n\nIf you wish to create additional namespaces within your project, then create additional files within a language directory with names corresponding to the namespace. For details on how to configure resource paths see [\"Resource path\" documentation below](#resource-path)\n\n### Standalone:\n\n```javascript\nvar i18n = require('i18n-future');\n\n// i18n fires a \"ready\" event when it is done loading resources\ni18n.on('ready', function () {\n    i18n.translate('name.first');\n});\n```\n\n### As express middleware:\n\n```javascript\nvar app = require('express')();\n\nvar i18n = require('i18n-future').middleware();\n\napp.use(i18n);\n\napp.use(function (req, res, next) {\n    // a translate method is now available on the request\n    // this will translate keys according to the language request headers\n    res.render('index', {\n        title: req.translate('title')\n    });\n});\n\napp.listen(3000);\n```\n\n### As express middleware with custom language detection:\n\nMiddleware will detect the language from the `Accepts` header by default, but if custom language detection is required then additional middleware can be added which sets `req.lang`.\n\n```javascript\nvar app = require('express')();\n\nvar i18n = require('i18n-future').middleware();\n\napp.use(function (req, res, next) {\n    // load language from querystring parameter - e.g. ?lang=en\n    req.lang = req.query.lang;\n    next();\n});\napp.use(i18n);\n...\n```\n\n### Passing language and namespace options\n\nThe translate method takes an additional options object with parameters for language and namespace to be loaded. This applies to both standalone and express middleware options (although in the middleware case any language option will overwrite the accepts header as a language preference)\n\n```javascript\n// simple language option\ni18n.translate('greeting', { lang: 'fr' });\n// multiple langauge options as an array\ni18n.translate('greeting', { lang: ['en-GB', 'en'] });\n```\n\n```javascript\n// simple namespace option\ni18n.translate('greeting', { namespace: 'admin' });\n```\n\nFor running code examples, look in [the examples directory](./examples).\n\n## Initialisation options\n\nIn each case options can be passed both to the i18n function, or to the middleware constructor equivalently.\n\n### Pre-defined resources\n\nYou can manually define resource sets at initialisation by passing in an object with the `resources` parameter of the options. This is useful when you have shared translations that are used across a number of modules, so you may wish to load from npm modules or similar - Default: `{}`\n\n```javascript\ni18n({\n    resources: {\n      en: require('shared-translations').en,\n      fr: require('shared-translations').fr\n    }\n});\n```\n\nThis object should have the same structure as the resources returned by [backends](#backend)\n\n### Fallback language:\n\nSet the language which is used as the fallback when none is specified, or the requested key does not exist in the requested language - Default: `'en'`\n\n```javascript\ni18n({\n    fallbackLng: 'en-GB'\n});\n```\n\n### Fallback namespace:\n\nSet the namespace which is used as the fallback when none is specified, or the requested key does not exist in the requested namespace - Default: `'default'`\n\n```javascript\ni18n({\n    fallbackNamespace: 'admin'\n});\n```\n\nIf required, both the `fallbackLng` and `fallbackNamespace` options can be passed as an array.\n\n### Resource path\n\nFor the fs resource loader (currently the only backend supported), sets the location to load resource files from, and pattern for parsing namespace and language from the file path - Default: `locales/__lng__/__ns__.json`.\n\n```javascript\ni18n({\n    path: '/var/i18n/__lng__/__ns__/resource.json'\n});\n```\n\n### Backend\n\nAllows setting a custom backend for non-fs resource loading. Backend must export a `load` method, which will be called with `options` object and a callback. Default: [fs resource loader](./lib/backends/fs.js)\n\n```javascript\ni18n({\n    backend: {\n        load: function (options, callback) {\n            // do custom resource loading\n            callback(null, resources);\n        }\n    }\n});\n```\n\nResources returned by the callback will be an object of the following form:\n\n```javascript\n{\n    en: {\n        default: {\n            ... translation keys for default namespace ...\n        }\n        'other-namespace': {\n            ... translation keys for afternative namespace...\n        }\n    },\n    fr: {\n        ...\n    },\n    de: {\n        ...\n    }\n}\n```\n",
  "readmeFilename": "README.md",
  "_id": "i18n-future@0.2.0",
  "_shasum": "a6982e0ab95c63bcc58ea7fcc29a1bbfa777ab3a",
  "_resolved": "https://registry.npmjs.org/i18n-future/-/i18n-future-0.2.0.tgz",
  "_from": "i18n-future@>=0.2.0 <0.3.0"
}
