{
  "name": "hmpo-template-mixins",
  "version": "3.6.0",
  "description": "A middleware that exposes a series of Mustache mixins on res.locals to ease usage of forms, translations, and some general needs.",
  "main": "index.js",
  "scripts": {
    "test": "npm run lint && npm run unit",
    "lint": "eslint .",
    "unit": "mocha test/. --require ./test/helpers.js --recursive"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/UKHomeOffice/passports-template-mixins.git"
  },
  "keywords": [
    "middleware",
    "express",
    "partials",
    "hogan",
    "mustache",
    "form",
    "translations",
    "general"
  ],
  "author": {
    "name": "Seb Insua"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/UKHomeOffice/passports-template-mixins/issues"
  },
  "homepage": "https://github.com/UKHomeOffice/passports-template-mixins",
  "dependencies": {
    "hogan.js": "^3.0.2",
    "moment": "^2.9.0",
    "underscore": "^1.7.0"
  },
  "devDependencies": {
    "chai": "^2.1.0",
    "eslint": "^0.14.1",
    "mocha": "^2.1.0",
    "sinon": "^1.12.2",
    "sinon-chai": "^2.7.0"
  },
  "readme": "# passports-template-mixins\nA middleware that exposes a series of Mustache mixins on `res.locals` to ease usage of forms, translations, and some other things.\n\nIt takes in two arguments, a `fields` object containing field configuration, and an [options object](#options).\n\n## Installation\n\n```javascript\nnpm install [--save] hmpo-template-mixins;\n```\n\n## Usage\n\n```javascript\nvar express = require('express');\n\nvar i18n = require('i18n-future');\n\nvar fields = require('./routes/renew-your-passport/fields');\n\napp.set('view engine', 'html');\napp.set('views', path.join(__dirname, '/views'));\n\napp.use(i18n.middleware());\napp.use(require('hmpo-template-mixins')(fields, { sharedTranslationsKey: 'passport.renew' }));\n\napp.use(function (req, res) {\n    // NOTE: res.locals.partials has been set.\n\n    res.render('example-template');\n});\n```\n\n## Translation\n\nBy default any function set to `req.translate` will be used for translation if it exists. For example, that generated using [i18n-future](https://npmjs.com/package/i18n-future) middleware.\n\n## Options\n\n### viewsDirectory\n\nAllows you override the directory that the module checks for partials in - Default: the root of this project\n\n### viewEngine\n\nAllows you to alter the file extension of the templates - Default: 'html'\n\n### sharedTranslationsKey\n\nPrefixes keys for translation - Default: ''\n\n### translate\n\nDefines a custom translation method - Default: `req.translate`\n\n## Mustache mixins available\n\n```\nt\ntime\nselected\nlowercase\nuppercase\nhyphenate\ndate\ncurrency\nselect\ninput-text\ninput-date\ninput-text-compound\ninput-text-code\ninput-number\ninput-phone\nradio-group\ncheckbox\ncheckbox-compound\ncheckbox-required\ninput-submit\ntextarea\n```\n\n## Options\n\n- `className`: A string or array of string class names.\n- `label`: The intended value of the HTML `label` attribute.\n- `type`: The value of the HTML input `type` attribute.\n- `required`: Value applied to `aria-required` HTML attribute.\n- `hint`: This adds context to the label, which it is a part of, for input text, radio groups and textarea. It is used within the input by aria-describedby for screen readers.\n- `maxlength`: Applicable to text-based fields and mapped to the `maxlength` HTML attribute.\n- `options`: Applicable to HTML `select` and `radio` controls and used to generate the items of either HTML element.\n- `selected`: Applicable to `select`, `checkbox`, and `radio` controls. Will render the selected HTML option/element selected or checked.\n- `legend`: Applicable to `radio` button controls, which are wrapped in a HTML `fieldset` with a `legend` element.\n- `legendClassName`: Applied as a class name to HTML `legend` attribute.\n- `toggle`: Can be used to toggle the display of the HTML element with a matching `id`. See [passports-frontend-toolkit](https://github.com/UKHomeOffice/passports-frontend-toolkit/blob/master/assets/javascript/progressive-reveal.js) for details.\n- `attributes`: A hash of key/value pairs applicable to a HTML `textarea` field. Each key/value is assigned as an attribute of the `textarea`. For example `spellcheck=\"true\"`.\n",
  "readmeFilename": "README.md",
  "_id": "hmpo-template-mixins@3.6.0",
  "_shasum": "b288b3ab31166e3f150b91463ec0cb3852b9d166",
  "_resolved": "https://registry.npmjs.org/hmpo-template-mixins/-/hmpo-template-mixins-3.6.0.tgz",
  "_from": "hmpo-template-mixins@>=3.3.0 <4.0.0"
}
